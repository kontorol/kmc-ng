import { AfterContentInit, EventEmitter, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { ColumnComponent } from './column.component';
import { Subscription } from 'rxjs/Subscription';
import "rxjs/add/operator/delay";
import { Observable } from "rxjs/Observable";
import 'rxjs/add/observable/fromEvent';
export declare class DraggableDataTableComponent implements AfterContentInit, OnInit {
    private renderer;
    emptyStateTemplate: TemplateRef<any>;
    draggableViewTemplate: TemplateRef<any>;
    valueChange: EventEmitter<any[]>;
    private draggableElement;
    private tableBody;
    cols: QueryList<ColumnComponent>;
    currentDraggableItem: any;
    draggable: any;
    tableBodyElement: any;
    columns: ColumnComponent[];
    dragModeOff: boolean;
    selectedIndexes: number[];
    mouseMoveSubscription: Subscription;
    mouseMove: Observable<any>;
    private _value;
    draggableItems: any[];
    unDraggableItemsFromTop: any[];
    unDraggableItemsFromBottom: any[];
    private _currentDraggedIndex;
    private _currentPlaceHolderIndex;
    private _currentDraggedElement;
    private _dropAvailable;
    value: any[];
    unDraggableFromTop: number;
    unDraggableFromBottom: number;
    rowTrackBy: Function;
    columnTrackBy: Function;
    paginator: boolean;
    rows: number;
    rowsPerPageOptions: number[];
    showIndex: boolean;
    multipleDragAndDrop: boolean;
    selectable: boolean;
    selectionChange: EventEmitter<any[]>;
    pageChange: EventEmitter<any>;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    onMouseMove(event: MouseEvent): void;
    onMouseOver(event: any, index: number): void;
    onMouseDown(event: MouseEvent, index: number): void;
    onMouseUp(): void;
    paginate(event: any): void;
    selectAll(event: any): void;
    onSelectionChange(): void;
    getItemIndex(index: number): number;
    private _updateView;
    private _updateDraggable;
    private _onMouseLeave;
    private _onMouseEnter;
    private _orderItems;
}
