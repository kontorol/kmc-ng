/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Dropdown } from 'primeng/components/dropdown/dropdown';
import { animate, state, style, transition, trigger } from '@angular/animations';
/** @type {?} */
export var DROPDOWN_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DropdownComponent; }),
    multi: true
};
var DropdownComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DropdownComponent, _super);
    function DropdownComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    DropdownComponent.prototype.onItemClick = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        if (!option['disabled']) {
            _super.prototype.onItemClick.call(this, event, option);
        }
        else {
            event.stopPropagation();
        }
    };
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    DropdownComponent.prototype.selectItem = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        if (!option['disabled']) {
            _super.prototype.selectItem.call(this, event, option);
        }
        else {
            event.stopPropagation();
        }
    };
    DropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kDropdown',
                    template: "<div #container [ngClass]=\"{'ui-dropdown ui-widget ui-state-default ui-corner-all ui-helper-clearfix':true,\n            'ui-state-disabled':disabled,'ui-dropdown-open':overlayVisible,'ui-state-focus':focused, 'ui-dropdown-clearable': showClear && !disabled}\"\n     (click)=\"onMouseclick($event)\" [ngStyle]=\"style\" [class]=\"styleClass\">\n  <div class=\"ui-helper-hidden-accessible\" *ngIf=\"autoWidth\">\n    <select [required]=\"required\" [attr.name]=\"name\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" tabindex=\"-1\" aria-hidden=\"true\">\n      <option *ngIf=\"placeholder\">{{placeholder}}</option>\n      <ng-container *ngIf=\"group\">\n        <optgroup *ngFor=\"let option of options\" [attr.label]=\"option.label\">\n          <option *ngFor=\"let option of option.items\" [value]=\"option.value\" [selected]=\"selectedOption == option\">{{option.label}}</option>\n          <optgroup>\n      </ng-container>\n      <ng-container *ngIf=\"!group\">\n        <option *ngFor=\"let option of options\" [value]=\"option.value\" [selected]=\"selectedOption == option\">{{option.label}}</option>\n      </ng-container>\n    </select>\n  </div>\n  <div class=\"ui-helper-hidden-accessible\">\n    <input #in [attr.id]=\"inputId\" type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" readonly (focus)=\"onInputFocus($event)\" role=\"listbox\"\n           (blur)=\"onInputBlur($event)\" (keydown)=\"onKeydown($event, true)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.autofocus]=\"autofocus\">\n  </div>\n  <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all':true,'ui-dropdown-label-empty':(label == null || label.length === 0)}\" *ngIf=\"!editable && (label != null)\">\n    <ng-container *ngIf=\"!selectedItemTemplate\">{{label||'empty'}}</ng-container>\n    <ng-container *ngTemplateOutlet=\"selectedItemTemplate; context: {$implicit: selectedOption}\"></ng-container>\n  </label>\n  <label [ngClass]=\"{'ui-dropdown-label ui-inputtext ui-corner-all ui-placeholder':true,'ui-dropdown-label-empty': (placeholder == null || placeholder.length === 0)}\" *ngIf=\"!editable && (label == null)\">{{placeholder||'empty'}}</label>\n  <input #editableInput type=\"text\" [attr.aria-label]=\"selectedOption ? selectedOption.label : ' '\" class=\"ui-dropdown-label ui-inputtext ui-corner-all\" *ngIf=\"editable\" [disabled]=\"disabled\" [attr.placeholder]=\"placeholder\"\n         (click)=\"onEditableInputClick($event)\" (input)=\"onEditableInputChange($event)\" (focus)=\"onEditableInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n  <i class=\"ui-dropdown-clear-icon pi pi-times\" (click)=\"clear($event)\" *ngIf=\"value != null && showClear && !disabled\"></i>\n  <div class=\"ui-dropdown-trigger ui-state-default ui-corner-right\">\n    <span class=\"ui-dropdown-trigger-icon ui-clickable\" [ngClass]=\"dropdownIcon\"></span>\n  </div>\n  <div #panel [ngClass]=\"'ui-dropdown-panel ui-widget-content ui-corner-all ui-shadow'\" [@panelState]=\"overlayVisible ? 'visible' : 'hidden'\"\n       [style.display]=\"overlayVisible ? 'block' : 'none'\" [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\">\n    <div *ngIf=\"filter\" class=\"ui-dropdown-filter-container\" (input)=\"onFilter($event)\" (click)=\"$event.stopPropagation()\">\n      <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-dropdown-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n             (keydown.enter)=\"$event.preventDefault()\" (keydown)=\"onKeydown($event, false)\">\n      <span class=\"ui-dropdown-filter-icon pi pi-search\"></span>\n    </div>\n    <div #itemswrapper class=\"ui-dropdown-items-wrapper\" [style.max-height]=\"scrollHeight||'auto'\">\n      <ul class=\"ui-dropdown-items ui-dropdown-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\">\n        <ng-container *ngIf=\"group\">\n          <ng-template ngFor let-optgroup [ngForOf]=\"optionsToDisplay\">\n            <li class=\"ui-dropdown-item-group\">\n              <span *ngIf=\"!groupTemplate\">{{optgroup.label||'empty'}}</span>\n              <ng-container *ngTemplateOutlet=\"groupTemplate; context: {$implicit: optgroup}\"></ng-container>\n            </li>\n            <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optgroup.items, selectedOption: selectedOption}\"></ng-container>\n          </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!group\">\n          <ng-container *ngTemplateOutlet=\"itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}\"></ng-container>\n        </ng-container>\n        <ng-template #itemslist let-options let-selectedOption=\"selectedOption\">\n          <li *ngFor=\"let option of options;let i=index\"\n              [ngClass]=\"{\n                'ui-dropdown-item ui-corner-all':true,\n                'ui-state-highlight':(selectedOption == option),\n                'ui-dropdown-item-empty':!option.label||option.label.length === 0,\n                'ui-state-disabled': option.disabled\n              }\"\n              (click)=\"onItemClick($event, option)\">\n            <span *ngIf=\"!itemTemplate\">{{option.label||'empty'}}</span>\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: option}\"></ng-container>\n          </li>\n        </ng-template>\n        <li *ngIf=\"filter && optionsToDisplay && optionsToDisplay.length === 0\">{{emptyFilterMessage}}</li>\n      </ul>\n    </div>\n  </div>\n</div>\n",
                    styles: [".ui-dropdown{display:inline-block;position:relative;cursor:pointer;vertical-align:middle}.ui-dropdown .ui-dropdown-clear-icon{position:absolute;top:50%;font-size:.75em;height:1em;margin-top:-.5em;right:2.5em}.ui-dropdown .ui-dropdown-trigger{border-right:none;border-top:none;border-bottom:none;cursor:pointer;width:1.5em;height:100%;position:absolute;right:0;top:0;padding:0 .25em}.ui-dropdown .ui-dropdown-trigger .ui-dropdown-trigger-icon{top:50%;left:50%;margin-top:-.5em;margin-left:-.5em;position:absolute}.ui-dropdown .ui-dropdown-label{display:block;border:none;white-space:nowrap;overflow:hidden;font-weight:400;width:100%;padding-right:2.5em}.ui-dropdown-item-empty,.ui-dropdown-label-empty{text-indent:-9999px;overflow:hidden}.ui-state-disabled{opacity:.6;cursor:default}.ui-dropdown.ui-state-disabled .ui-dropdown-label,.ui-dropdown.ui-state-disabled .ui-dropdown-trigger{cursor:default}.ui-dropdown label.ui-dropdown-label{cursor:pointer}.ui-dropdown input.ui-dropdown-label{cursor:default}.ui-dropdown .ui-dropdown-panel{min-width:100%}.ui-dropdown-panel{position:absolute;height:auto;display:none}.ui-dropdown-panel .ui-dropdown-items-wrapper{overflow:auto}.ui-dropdown-panel .ui-dropdown-item{font-weight:400;border:0;cursor:pointer;margin:1px 0;padding:.125em .25em;text-align:left}.ui-dropdown-panel .ui-dropdown-item-group{font-weight:700;cursor:default}.ui-dropdown-panel .ui-dropdown-list{padding:.4em;border:0}.ui-dropdown-panel .ui-dropdown-filter{width:100%;box-sizing:border-box;padding-right:1.5em}.ui-dropdown-panel .ui-dropdown-filter-container{position:relative;margin:0;padding:.4em;display:inline-block;width:100%}.ui-dropdown-panel .ui-dropdown-filter-container .ui-dropdown-filter-icon{position:absolute;top:.8em;right:1em}.ui-fluid .ui-dropdown{width:100%}"],
                    animations: [
                        trigger('panelState', [
                            state('hidden', style({
                                opacity: 0
                            })),
                            state('visible', style({
                                opacity: 1
                            })),
                            transition('visible => hidden', animate('400ms ease-in')),
                            transition('hidden => visible', animate('400ms ease-out'))
                        ])
                    ],
                    host: {
                        '[class.ui-inputwrapper-filled]': 'filled',
                        '[class.ui-inputwrapper-focus]': 'focused'
                    },
                    providers: [DROPDOWN_VALUE_ACCESSOR]
                },] },
    ];
    return DropdownComponent;
}(Dropdown));
export { DropdownComponent };
//# sourceMappingURL=data:application/json;base64,